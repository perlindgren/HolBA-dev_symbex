open wordsTheory;



val _ = new_theory "aes_spec";



val _ = type_abbrev("aes_state", ``:bool[4] -> bool[4] -> bool[8]``);

val _ = new_constant ("aes_sbox", mk_vartype "word8 -> word8");

val aes_sbox_list_def = Define `
aes_sbox_list = [
    0x63w:word8; 0x7Cw; 0x77w; 0x7Bw; 0xF2w; 0x6Bw; 0x6Fw; 0xC5w; 0x30w; 0x01w; 0x67w; 0x2Bw; 0xFEw; 0xD7w; 0xABw; 0x76w;
    0xCAw; 0x82w; 0xC9w; 0x7Dw; 0xFAw; 0x59w; 0x47w; 0xF0w; 0xADw; 0xD4w; 0xA2w; 0xAFw; 0x9Cw; 0xA4w; 0x72w; 0xC0w;
    0xB7w; 0xFDw; 0x93w; 0x26w; 0x36w; 0x3Fw; 0xF7w; 0xCCw; 0x34w; 0xA5w; 0xE5w; 0xF1w; 0x71w; 0xD8w; 0x31w; 0x15w;
    0x04w; 0xC7w; 0x23w; 0xC3w; 0x18w; 0x96w; 0x05w; 0x9Aw; 0x07w; 0x12w; 0x80w; 0xE2w; 0xEBw; 0x27w; 0xB2w; 0x75w;
    0x09w; 0x83w; 0x2Cw; 0x1Aw; 0x1Bw; 0x6Ew; 0x5Aw; 0xA0w; 0x52w; 0x3Bw; 0xD6w; 0xB3w; 0x29w; 0xE3w; 0x2Fw; 0x84w;
    0x53w; 0xD1w; 0x00w; 0xEDw; 0x20w; 0xFCw; 0xB1w; 0x5Bw; 0x6Aw; 0xCBw; 0xBEw; 0x39w; 0x4Aw; 0x4Cw; 0x58w; 0xCFw;
    0xD0w; 0xEFw; 0xAAw; 0xFBw; 0x43w; 0x4Dw; 0x33w; 0x85w; 0x45w; 0xF9w; 0x02w; 0x7Fw; 0x50w; 0x3Cw; 0x9Fw; 0xA8w;
    0x51w; 0xA3w; 0x40w; 0x8Fw; 0x92w; 0x9Dw; 0x38w; 0xF5w; 0xBCw; 0xB6w; 0xDAw; 0x21w; 0x10w; 0xFFw; 0xF3w; 0xD2w;
    0xCDw; 0x0Cw; 0x13w; 0xECw; 0x5Fw; 0x97w; 0x44w; 0x17w; 0xC4w; 0xA7w; 0x7Ew; 0x3Dw; 0x64w; 0x5Dw; 0x19w; 0x73w;
    0x60w; 0x81w; 0x4Fw; 0xDCw; 0x22w; 0x2Aw; 0x90w; 0x88w; 0x46w; 0xEEw; 0xB8w; 0x14w; 0xDEw; 0x5Ew; 0x0Bw; 0xDBw;
    0xE0w; 0x32w; 0x3Aw; 0x0Aw; 0x49w; 0x06w; 0x24w; 0x5Cw; 0xC2w; 0xD3w; 0xACw; 0x62w; 0x91w; 0x95w; 0xE4w; 0x79w;
    0xE7w; 0xC8w; 0x37w; 0x6Dw; 0x8Dw; 0xD5w; 0x4Ew; 0xA9w; 0x6Cw; 0x56w; 0xF4w; 0xEAw; 0x65w; 0x7Aw; 0xAEw; 0x08w;
    0xBAw; 0x78w; 0x25w; 0x2Ew; 0x1Cw; 0xA6w; 0xB4w; 0xC6w; 0xE8w; 0xDDw; 0x74w; 0x1Fw; 0x4Bw; 0xBDw; 0x8Bw; 0x8Aw;
    0x70w; 0x3Ew; 0xB5w; 0x66w; 0x48w; 0x03w; 0xF6w; 0x0Ew; 0x61w; 0x35w; 0x57w; 0xB9w; 0x86w; 0xC1w; 0x1Dw; 0x9Ew;
    0xE1w; 0xF8w; 0x98w; 0x11w; 0x69w; 0xD9w; 0x8Ew; 0x94w; 0x9Bw; 0x1Ew; 0x87w; 0xE9w; 0xCEw; 0x55w; 0x28w; 0xDFw;
    0x8Cw; 0xA1w; 0x89w; 0x0Dw; 0xBFw; 0xE6w; 0x42w; 0x68w; 0x41w; 0x99w; 0x2Dw; 0x0Fw; 0xB0w; 0x54w; 0xBBw; 0x16w
]`;

val aes_sbox_def = Define `
 aes_sbox (x:word8) = EL (w2n x) aes_sbox_list`;

val aes_sub_byte_def = Define `
  aes_sub_byte (s:aes_state) = 
   (\i.\j. aes_sbox(s i j))`;

val aes_shift_row_def = Define `
  aes_shift_row (s:aes_state) = 
   (\i.\j. s i (j + i))`;


val aes_mix_column_def = Define `
aes_mix_column (s:aes_state) =
(\i.\j. 
  let h c = 0xffw * (0x80w && (s i c)) in
  let b c = ((s i c) << 1) ⊕ (0x1Bw && (h c)) in
  (b j) ⊕ (s i (3w + j)) ⊕ (s i (2w + j)) ⊕ (b (1w+j)) ⊕ (s i (1w+j))
)`;

val aes_add_key_def = Define `
  aes_add_key (s:aes_state) k = 
   (\i.\j. (s i j) ⊕ (k i j))`;

val aes_round_def = Define `
  aes_round (s:aes_state) k =
  aes_add_key (aes_mix_column (aes_shift_row (aes_sub_byte s))) k`;

val _ = EVAL ``aes_sub_byte x``;
val _ = EVAL ``aes_shift_row x``;
val _ = EVAL ``aes_mix_column (\x.\y.a x y)``;

val _ = EVAL ``aes_round (\x.\y.a x y) (\x.\y.b x y) x y``;


val _ = export_theory();

